=============
Use statement
=============

use "math"

---
(source_file
  (use_statement
    (string)
  )
)

=======================
Use statement with name
=======================

use 
foo = "foo"

---

(source_file 
  (use_statement
    (identifier)
    (string)
  ))

=======================
Multiple Use statements
=======================

use "foo"
use bla12 
= "blubb"
use "foo"

---

(source_file
  (use_statement
    (string))
  (use_statement
    (identifier)
    (string))
  (use_statement
    (string))
)

========
Use FFI
========

use @println[U64](i: U64, u: U64, ...)?

---

(source_file
  (use_statement
    (ffi_method
      (identifier)
      returns: (base_type name: (identifier))
      (parameters
        (parameter
          name: (identifier)
          (base_type name: (identifier))
        )
        (parameter
          name: (identifier)
          (base_type name: (identifier))
        )
        (parameter)
      )
    )
  )
)

======
Use if
======

use "package" if consume iso foo

---

(source_file
  (use_statement
    (string)
    (platform_specifier
      (if_block
        (block 
          (consume_expression 
            (capability)
            (identifier)
          )
        )
      )
    )
  )
)

==================
Use primitive type
==================

use @primitve_types[Bool](a: U64, b: I128, c: Main ref, d: U8 iso^, e: I8 tag!)

---

(source_file
  (use_statement
    (ffi_method
      (identifier)
      returns: (base_type name: (identifier))
      (parameters
        (parameter
          name: (identifier)
          (base_type name: (identifier))
        )
        (parameter
          name: (identifier)
          (base_type name: (identifier))
        )
        (parameter
          name: (identifier)
          (ref_type
            (base_type name: (identifier))
          )
        )
        (parameter
          name: (identifier)
          (ephemeral_type
            (iso_type
              (base_type name: (identifier))
            )
          )
        )
        (parameter
          name: (identifier)
          (aliased_type
            (tag_type
              (base_type name: (identifier))
            )
          )
        )
      )
    )
  )
)

==============
Use Union type
==============

use @union_type[(U8 | I8)]()

---

(source_file
  (use_statement
    (ffi_method
      (identifier)
      returns: (union_type
        (base_type name: (identifier))
        (base_type name: (identifier))
      )
      (parameters)
    )
  )
)

=====================
Use Intersection type
=====================

use @union_type[(U8 & I8)]()

---

(source_file
  (use_statement
    (ffi_method
      (identifier)
      returns: (intersection_type
        (base_type name: (identifier))
        (base_type name: (identifier))
      )
      (parameters)
    )
  )
)

==============
Use tuple type
==============

use @tuple_type[(Foo, (Bar | Baz))]()

---

(source_file
  (use_statement
    (ffi_method
      (identifier)
      returns: (tuple_type
        (base_type name: (identifier))
        (union_type
          (base_type name: (identifier))
          (base_type name: (identifier))
        )
      )
      (parameters)
    )
  )
)

================
Use grouped type
================

use @grouped[(Foo)]()

---

(source_file 
  (use_statement
    (ffi_method
      (identifier)
      returns: (tuple_type
        (base_type name: (identifier))
      )
      (parameters)
    )
  )
)

==================
Use ephemeral type
==================

use @snot[Iterator[this->A]^]()
---
(source_file 
  (use_statement
    (ffi_method
      (identifier)
      returns: (ephemeral_type
        (base_type
          name: (identifier)
          (type_args
            (viewpoint_type
              (this)
              (base_type name: (identifier))
            )
          )
        )
      )
      (parameters)
    )
  )
)

